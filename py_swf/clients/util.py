# -*- coding: utf-8 -*-import inspectimport loggingfrom logging.config import dictConfigimport staticconfimport timeimport typesLOG_CALLS_TO_AMAZON_APIS='calls_to_Amazon_APIs'logger = logging.getLogger(LOG_CALLS_TO_AMAZON_APIS)logger.setLevel(logging.INFO)logging_config = dict(    version = 1,    formatters = {        'f': {'format':              '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'}        },    handlers = {        'h': {'class': 'logging.StreamHandler',              'formatter': 'f',              'level': logging.INFO}        },    root = {        'handlers': ['h'],        'level': logging.INFO,        },)dictConfig(logging_config)staticconf.YamlConfiguration('config/defaults.yaml')api_list = staticconf.read_list('Amazon_SWF_APIs', default=[])def _get_amazon_api_name(func):    translated_name = ''    for seg in func.__name__.split('_'):        translated_name += seg.capitalize()    return translated_namedef log_calls_to_amazon_apis(func):    def log_calls(*args, **kwargs):        func(*args, **kwargs)        logger.log(            time=time.time(),            API_name=_get_amazon_api_name(func)        )    return log_callsdef set_logger_on_boto_client(boto_client):    for field, func in inspect.getmembers(boto_client):        if isinstance(field, types.UnboundMethodType) and _get_amazon_api_name(func) in api_list:            setattr(boto_client, field, log_calls_to_amazon_apis(func))